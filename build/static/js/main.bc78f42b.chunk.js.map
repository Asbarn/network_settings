{"version":3,"sources":["components/TextInput/styles.module.css","components/Ethernet/styles.module.css","components/RadioButton/RadioButton.js","components/Ethernet/Ethernet.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","backgroundColor","icon","borderRadius","width","height","boxShadow","backgroundImage","outline","outlineOffset","background","checkedIcon","display","content","MyRadioButton","props","classes","Radio","className","disableRipple","color","clsx","flexDirection","justifyContent","alignItems","useStylesLabel","position","fontSize","transform","ValidateIPaddress","str","test","Ethernet","classesLabel","useState","setInputGroup","ref","useRef","useEffect","current","childNodes","forEach","elem","classList","add","styles","disabledText","disabled","setFormGroup","refForm","setcheckboxRef","checkboxRef","setSecondInputGroup","secondRef","setThirdInputGroup","thirdRef","setFourthInputGroup","fourthRef","setWirelessRef","wirelessRef","index","setWirelessRefCheckbox","wirelessRefCheckbox","setSecurityInputGroup","securityRef","pages","setPages","ethernetDNSradio","setEthernetDNSradio","wirelessName","setWirelessName","checkboxName","setCheckboxName","RadiotestName","settestName","Radio2testName","set2testName","container","id","action","method","ethernetForm","onSubmit","e","preventDefault","result","value","alert","ethernetSettingIp","message","ipAddress","subnetMask","defaultGateway","ethernetSettingDns","preferredDnsServer","alternativeDnsServer","contains","wirelessSettings","name","securityKey","ip","dns","console","log","JSON","stringify","ethernet","RadioGroup","onChange","ev","target","defaultValue","aria-label","FormControlLabel","control","onClick","label","remove","textFieldContainer","MuiInputLabel","InputLabel","required","shrink","htmlFor","Input","textField","wireless","Checkbox","style","inputProps","checked","el","FormControl","NativeSelect","IconButton","padding","marginTop","border","buttonContainer","Button","saveButton","type","form","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc78f42b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textFieldContainer\":\"styles_textFieldContainer__14NcO\",\"textInputContainer\":\"styles_textInputContainer__3ZMQl\",\"textInput\":\"styles_textInput__1pRIf\",\"required\":\"styles_required__3BJcY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3RuEA\",\"ethernetForm\":\"styles_ethernetForm__1bxAa\",\"ethernet\":\"styles_ethernet__2h3O7\",\"wireless\":\"styles_wireless__11GxV\",\"textFieldContainer\":\"styles_textFieldContainer__2tej4\",\"textFields\":\"styles_textFields__18R6o\",\"textField\":\"styles_textField__2Ke33\",\"disabledText\":\"styles_disabledText__1tgEN\",\"MuiInputLabel\":\"styles_MuiInputLabel__14ws4\",\"buttonContainer\":\"styles_buttonContainer__2ZLw2\",\"saveButton\":\"styles_saveButton__3iMd3\"};","import React, {\r\n    useState, useEffect, useRef, useCallback,\r\n} from 'react';\r\nimport clsx from 'clsx';\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      '&:hover': {\r\n        backgroundColor: 'transparent',\r\n      },\r\n    },\r\n    icon: {\r\n      borderRadius: '50%',\r\n      width: 25,\r\n      height:25,\r\n      boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\r\n      backgroundColor: '#f5f8fa',\r\n      backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\r\n      '$root.Mui-focusVisible &': {\r\n        outline: '2px auto rgba(19,124,189,.6)',\r\n        outlineOffset: 2,\r\n      },      \r\n      'input:disabled ~ &': {\r\n        boxShadow: 'none',\r\n        background: 'rgba(206,217,224,.5)',\r\n      },\r\n    },\r\n    checkedIcon: {\r\n      backgroundColor: '#137cbd',\r\n      backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\r\n      '&:before': {\r\n        display: 'block',\r\n        width: 25,\r\n        height: 25,\r\n        backgroundImage: 'radial-gradient(#fff,#fff 28%,transparent 32%)',\r\n        content: '\"\"',\r\n      },\r\n    },\r\n  });\r\n  export function MyRadioButton(props) {\r\n    const classes = useStyles();\r\n  \r\n    return (\r\n      <Radio\r\n        className={classes.root}\r\n        disableRipple\r\n        color=\"default\"\r\n        checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)} />}\r\n        icon={<span className={classes.icon} />}\r\n        {...props}\r\n      />\r\n    );\r\n  }","import React, {\n    useState, useEffect, useRef, \n} from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport styles from './styles.module.css';\nimport { MyRadioButton } from \"../RadioButton\"\nimport RefreshRoundedIcon from '@material-ui/icons/RefreshRounded';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles({\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n\n    },\n});\nconst useStylesLabel = makeStyles({\n    root: {\n        position: 'relative',\n        color: 'black',\n        fontSize: `20px`,\n        transform: \"none\"\n    },\n});\nfunction ValidateIPaddress(str) {\n    var ipformat = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\n    if (ipformat.test(str)) return (true)\n    return false\n}\n\nexport function Ethernet() {\n    const classes = useStyles(); const classesLabel = useStylesLabel();\n\n    const [InputGroup, setInputGroup] = useState(0);\n    const ref = useRef(null);\n    useEffect(() => {\n        setInputGroup(ref.current);\n        if (ref && ref.current) {\n            ref.current.childNodes.forEach((elem) => {\n                elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                elem.childNodes[1].childNodes[0].disabled = true;\n            });\n        }\n    }, [ref.current]);\n\n    const [formGroup, setFormGroup] = useState(0);\n    const refForm = useRef(null);\n    useEffect(() => {\n        setFormGroup(refForm.current);\n    }, [refForm.current]);\n\n    const [checkbox, setcheckboxRef] = useState(0);\n    const checkboxRef = useRef(null);\n    useEffect(() => {\n        setcheckboxRef(checkboxRef.current);\n    }, [checkboxRef.current]);\n\n    const [secondInputGroup, setSecondInputGroup] = useState(0);\n    const secondRef = useRef(null);\n    useEffect(() => {\n        setSecondInputGroup(secondRef.current);\n        if (secondRef && secondRef.current) {\n            secondRef.current.childNodes.forEach((elem) => {\n                elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                elem.childNodes[1].childNodes[0].disabled = true;\n            });\n        }\n    }, [secondRef.current]);\n\n    const [thirdInputGroup, setThirdInputGroup] = useState(0);\n    const thirdRef = useRef(null);\n    useEffect(() => {\n        setThirdInputGroup(thirdRef.current);\n        if (thirdRef && thirdRef.current) {\n            thirdRef.current.childNodes.forEach((elem) => {\n                elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                elem.childNodes[1].childNodes[0].disabled = true;\n            });\n        }\n    }, [thirdRef.current]);\n\n    const [fourthInputGroup, setFourthInputGroup] = useState(0);\n    const fourthRef = useRef(null);\n    useEffect(() => {\n        setFourthInputGroup(fourthRef.current);\n        if (fourthRef && fourthRef.current) {\n            fourthRef.current.childNodes.forEach((elem) => {\n                elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                elem.childNodes[1].childNodes[0].disabled = true;\n            });\n        }\n    }, [fourthRef.current]);\n\n    const [wirelessRefGroup, setWirelessRef] = useState(0);\n    const wirelessRef = useRef(null);\n    useEffect(() => {\n        setWirelessRef(wirelessRef.current);\n        if (wirelessRef && wirelessRef.current) {\n            wirelessRef.current.childNodes.forEach((elem, index) => {\n                if (index > 1) {\n                    elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                    elem.classList.add(`${styles.disabledText}`);\n                    switch (index) {\n                        case 2:\n                            elem.childNodes[0].childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                            elem.childNodes[0].childNodes[1].childNodes[0].disabled = true;\n                            elem.childNodes[0].childNodes[2].disabled = true;\n                            break;\n                        case 3:\n\n                            elem.childNodes[0].childNodes[0].childNodes[0].disabled = true;\n                            break;\n                        case 5:\n                            elem.childNodes[0].childNodes[0].childNodes[0].childNodes[0].disabled = true;\n                            elem.childNodes[1].childNodes[0].childNodes[0].childNodes[0].disabled = true;\n                            break;\n                        case 7:\n                            elem.childNodes[0].childNodes[0].childNodes[0].childNodes[0].disabled = true;\n                            elem.childNodes[1].childNodes[0].childNodes[0].childNodes[0].disabled = true;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            });\n        }\n    }, [wirelessRef.current]);\n\n    const [wirelessRefCheck, setWirelessRefCheckbox] = useState(0);\n    const wirelessRefCheckbox = useRef(null);\n    useEffect(() => {\n        setWirelessRefCheckbox(wirelessRefCheckbox.current);\n    }, [wirelessRefCheckbox.current]);\n\n    const [securityInputGroup, setSecurityInputGroup] = useState(0);\n    const securityRef = useRef(null);\n    useEffect(() => {\n        setSecurityInputGroup(securityRef.current);\n        if (securityRef && securityRef.current) {\n            securityRef.current.childNodes.forEach((elem) => {\n                elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                elem.childNodes[1].childNodes[0].disabled = true;\n            });\n        }\n    }, [securityRef.current]);\n\n\n\n    //states of form\n    const [pages, setPages] = useState(\"Obtain an IP address automatically (DHCP/BootP)\");\n    function handleChange(ev) {\n        setPages(ev.target.value);\n\n    };\n    const [ethernetDNSradio, setEthernetDNSradio] = useState(\"Obtain DNS server address automatically\");\n    function handleChangeEthernetDNSradio(ev) {\n        setEthernetDNSradio(ev.target.value);\n\n    };\n\n    //wireless section states\n    const [wirelessName, setWirelessName] = useState(\"\");\n    function handleChangeWirelessName(ev) {\n        setWirelessName(ev.target.value);\n\n    };\n\n    const [checkboxName, setCheckboxName] = useState(false);\n    function handleChangeCheckboxName(ev) {\n        setCheckboxName(ev.target.checked);\n    };\n    const [RadiotestName, settestName] = useState(false);\n    const [Radio2testName, set2testName] = useState(false);\n    return (\n        <div className={styles.container}>\n            <form ref={refForm} id=\"my-form-id\" action=\"/\" method=\"POST\" className={styles.ethernetForm}\n                onSubmit={(e) => {\n\n                    e.preventDefault()\n                    const result = {};\n                    if (pages != \"Obtain an IP address automatically (DHCP/BootP)\") {\n                        if (!ValidateIPaddress(`${ref.current.childNodes[0].childNodes[1].childNodes[0].value}`)) { alert(\"Incorrect Ethernet settings (Incorrect IP address)\"); return }\n                        if (!ValidateIPaddress(`${ref.current.childNodes[1].childNodes[1].childNodes[0].value}`)) { alert(\"Incorrect Ethernet settings (Incorrect Subnet Mask)\"); return }\n                        result.ethernetSettingIp = {\n                            message: \"Use the following IP address\",\n                            ipAddress: `${ref.current.childNodes[0].childNodes[1].childNodes[0].value}`,\n                            subnetMask: `${ref.current.childNodes[1].childNodes[1].childNodes[0].value}`,\n                            defaultGateway: `${ref.current.childNodes[2].childNodes[1].childNodes[0].value}`,\n                        }\n\n                    } else result.ethernetSettingIp = { message: \"Obtain an IP address automatically (DHCP/BootP)\" }\n\n                    if (ethernetDNSradio != \"Obtain DNS server address automatically\") {\n                        if (!ValidateIPaddress(`${secondRef.current.childNodes[0].childNodes[1].childNodes[0].value}`)) { alert(\"Incorrect Ethernet settings (Incorrect DNS Server)\"); return }\n                        result.ethernetSettingDns = {\n                            message: \"Use the following DS server address\",\n                            preferredDnsServer: `${secondRef.current.childNodes[0].childNodes[1].childNodes[0].value}`,\n                            alternativeDnsServer: `${secondRef.current.childNodes[1].childNodes[1].childNodes[0].value}`,\n                        }\n\n                    } else result.ethernetSettingDns = { message: \"Obtain DNS server address automatically\" }\n\n\n                    if (wirelessRefCheckbox.current.classList.contains(\"Mui-checked\")) {\n                        result.wirelessSettings = { name: wirelessName, }\n                        if (checkboxName) {\n                            result.wirelessSettings.securityKey = securityRef.current.childNodes[0].childNodes[1].childNodes[0].value;\n                            result.wirelessSettings.message = \"Enable wireless security\"\n                        }\n                        else result.wirelessSettings.message = \"Disable wireless security\";\n\n                        if (!RadiotestName) { result.wirelessSettings.ip = { message: \"Obtain an IP address automatically (DHCP/BootP)\" } }\n                        else {\n                            if (!ValidateIPaddress(`${thirdRef.current.childNodes[0].childNodes[1].childNodes[0].value}`)) { alert(\"Incorrect Wireless settings (Incorrect IP address)\"); return }\n                            if (!ValidateIPaddress(`${thirdRef.current.childNodes[1].childNodes[1].childNodes[0].value}`)) { alert(\"Incorrect Wireless settings (Incorrect Subnet Mask)\"); return }\n                            result.wirelessSettings.ip = {\n                                message: \"Use the following IP address\",\n                                ipAddress: `${thirdRef.current.childNodes[0].childNodes[1].childNodes[0].value}`,\n                                subnetMask: `${thirdRef.current.childNodes[1].childNodes[1].childNodes[0].value}`,\n                                defaultGateway: `${thirdRef.current.childNodes[2].childNodes[1].childNodes[0].value}`,\n\n                            }\n                        }\n                        if (!Radio2testName) { result.wirelessSettings.dns = { message: \"Obtain DNS server address automatically\" } }\n                        else {\n                            if (!ValidateIPaddress(`${fourthRef.current.childNodes[0].childNodes[1].childNodes[0].value}`)) { alert(\"Incorrect Wireless settings (Incorrect DNS Server)\"); return }\n                            result.wirelessSettings.dns = {\n                                message: \"Use the following DS server address\",\n                                preferredDnsServer: `${fourthRef.current.childNodes[0].childNodes[1].childNodes[0].value}`,\n                                alternativeDnsServer: `${fourthRef.current.childNodes[1].childNodes[1].childNodes[0].value}`,\n                            }\n                        }\n                    } else result.wirelessSettings = { name: \"Disabled\" };\n\n                     console.log(JSON.stringify(result));\n                   // console.log(result)\n                }}>\n                <div className={styles.ethernet}>\n                    <h3>Ethernet settings</h3>\n                    <RadioGroup onChange={handleChange}\n                        value={pages}\n                        defaultValue=\"Obtain an IP address automatically (DHCP/BootP)\"\n                        aria-label=\"IP\">\n                        <FormControlLabel\n                            value=\"Obtain an IP address automatically (DHCP/BootP)\"\n                            control={(\n                                <MyRadioButton onClick={() => {\n                                    ref.current.childNodes.forEach((elem) => {\n                                        elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                                        elem.childNodes[1].childNodes[0].disabled = true; elem.childNodes[1].childNodes[0].value = '';\n                                    });\n                                }}\n                                />\n                            )}\n                            label=\"Obtain an IP address automatically (DHCP/BootP)\"\n                        />\n                        <FormControlLabel\n                            value=\"Use the following IP address\"\n                            defaultValue=\"Use the following IP address\"\n                            control={(\n                                <MyRadioButton onClick={() => {\n                                    ref.current.childNodes.forEach((elem) => {\n                                        elem.childNodes.forEach((elem) => { elem.classList.remove(`${styles.disabledText}`); });\n                                        elem.childNodes[1].childNodes[0].disabled = false;\n                                    });\n                                }}\n                                />\n                            )}\n                            label=\"Use the following IP address\"\n                        />\n                    </RadioGroup>\n                    <div ref={ref} className={styles.textFieldContainer}>\n                        <div className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} required shrink={false} htmlFor=\"my-input-1\">IP address:</InputLabel>\n                            <Input\n                                name=\"my-input-1\" className={styles.textField} required id=\"my-input-1\" />\n\n                        </div>\n                        <div className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} required shrink={false} htmlFor=\"my-input-2\">Subnet Mask: </InputLabel>\n                            <Input name=\"my-input-2\" className={styles.textField} required id=\"my-input-2\" />\n\n                        </div>\n                        <div className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} shrink={false} htmlFor=\"my-input-3\">Default Gateway:</InputLabel>\n                            <Input name=\"my-input-3\" className={styles.textField} id=\"my-input-3\" />\n\n                        </div>\n                    </div>\n\n                    <RadioGroup\n                        onChange={handleChangeEthernetDNSradio}\n                        value={ethernetDNSradio}\n                        defaultValue=\"Obtain DNS server address automatically\"\n                        aria-label=\"DNS\" name=\"customized-radios\">\n                        <FormControlLabel\n                            value=\"Obtain DNS server address automatically\"\n                            control={(\n                                <MyRadioButton onClick={() => {\n                                    secondRef.current.childNodes.forEach((elem) => {\n                                        elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                                        elem.childNodes[1].childNodes[0].disabled = true; elem.childNodes[1].childNodes[0].value = '';\n                                    });\n                                }}\n                                />\n                            )}\n                            label=\"Obtain DNS server address automatically\"\n                        />\n                        <FormControlLabel\n                            value=\"Use the following DS server address\"\n                            control={(\n                                <MyRadioButton onClick={() => {\n                                    secondRef.current.childNodes.forEach((elem) => {\n                                        elem.childNodes.forEach((elem) => { elem.classList.remove(`${styles.disabledText}`); });\n                                        elem.childNodes[1].childNodes[0].disabled = false;\n                                    });\n                                }}\n                                />\n                            )}\n                            label=\"Use the following DS server address\"\n                        />\n                    </RadioGroup>\n                    <div ref={secondRef} className={styles.textFieldContainer}>\n                        <div className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} required shrink={false} htmlFor=\"my-input-4\">Preferred DNS server:</InputLabel>\n                            <Input className={styles.textField} required id=\"my-input-4\" />\n\n                        </div>\n                        <div className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} shrink={false} htmlFor=\"my-input-5\">Alternative DNS server:</InputLabel>\n                            <Input className={styles.textField} id=\"my-input-5\" />\n\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.wireless} ref={wirelessRef}>\n                    <h3>Wireless settings</h3>\n                    <FormControlLabel\n                        control={(\n                            <Checkbox\n\n                                style={{\n                                    color: \"#137cbd\",\n                                }}\n                                value=\"CheckedWifi\"\n                                ref={wirelessRefCheckbox}\n                                inputProps={{ 'aria-label': 'CheckboxWIFI' }}\n                                onClick={(e) => {\n                                    if (!e.target.checked) {\n                                        wirelessRef.current.childNodes.forEach((elem, index) => {\n                                            if (index > 1) {\n                                                elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                                                elem.classList.add(`${styles.disabledText}`);\n                                                switch (index) {\n                                                    case 2:\n                                                        setCheckboxName(false);\n                                                        elem.childNodes[0].childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                                                        elem.childNodes[0].childNodes[1].childNodes[0].disabled = true;\n                                                        elem.childNodes[0].childNodes[2].disabled = true;\n                                                        break;\n                                                    case 3:\n\n                                                        elem.childNodes[0].childNodes[0].childNodes[0].disabled = true;\n                                                        break;\n\n                                                    case 4:\n                                                        elem.childNodes.forEach((elem) => {\n                                                            elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                                                            elem.childNodes[1].childNodes[0].disabled = true; elem.childNodes[1].childNodes[0].value = '';\n                                                        });\n                                                        break;\n\n                                                    case 5:\n                                                        settestName(false);\n                                                        elem.childNodes[0].childNodes[0].childNodes[0].childNodes[0].disabled = true;\n                                                        elem.childNodes[1].childNodes[0].childNodes[0].childNodes[0].checked = false;\n                                                        elem.childNodes[1].childNodes[0].childNodes[0].childNodes[0].disabled = true;\n                                                        break;\n                                                    case 6:\n                                                        elem.childNodes.forEach(elem => {\n                                                            elem.childNodes.forEach((el) => { el.classList.add(`${styles.disabledText}`); })\n                                                            elem.childNodes[1].childNodes[0].disabled = true;\n                                                        })\n                                                        break;\n                                                    case 7:\n                                                        set2testName(false);\n                                                        elem.childNodes[0].childNodes[0].childNodes[0].childNodes[0].disabled = true;\n                                                        elem.childNodes[1].childNodes[0].childNodes[0].childNodes[0].disabled = true;\n                                                        break;\n                                                    case 8:\n                                                        elem.childNodes.forEach(elem => {\n                                                            elem.childNodes.forEach((el) => { el.classList.add(`${styles.disabledText}`); })\n                                                            elem.childNodes[1].childNodes[0].disabled = true;\n                                                        })\n                                                        break;\n                                                    default:\n                                                        break;\n                                                }\n                                            }\n                                        });\n                                    } else {\n                                        wirelessRef.current.childNodes.forEach((elem, index) => {\n                                            if (index > 1) {\n                                                elem.childNodes.forEach((elem) => { elem.classList.remove(`${styles.disabledText}`); });\n                                                elem.classList.remove(`${styles.disabledText}`);\n                                                switch (index) {\n                                                    case 2:\n                                                        elem.childNodes[0].childNodes.forEach((elem) => { elem.classList.remove(`${styles.disabledText}`); });\n                                                        elem.childNodes[0].childNodes[1].childNodes[0].disabled = false;\n                                                        elem.childNodes[0].childNodes[2].disabled = false;\n\n                                                        break;\n                                                    case 3:\n                                                        elem.childNodes[0].childNodes[0].childNodes[0].disabled = false;\n                                                        break;\n                                                    // case 4:\n                                                    //     elem.childNodes.forEach((elem) => {\n                                                    //         elem.childNodes.forEach((elem) => { elem.classList.remove(`${styles.disabledText}`); });\n                                                    //         elem.childNodes[1].childNodes[0].disabled = false;\n                                                    //     });\n                                                    //     break;\n                                                    case 5:\n                                                        elem.childNodes[0].childNodes[0].childNodes[0].childNodes[0].disabled = false;\n                                                        elem.childNodes[1].childNodes[0].childNodes[0].childNodes[0].disabled = false;\n                                                        break;\n                                                    case 7:\n                                                        elem.childNodes[0].childNodes[0].childNodes[0].childNodes[0].disabled = false;\n                                                        elem.childNodes[1].childNodes[0].childNodes[0].childNodes[0].disabled = false;\n                                                        break;\n                                                    case 8:\n                                                        elem.childNodes.forEach(elem => {\n                                                            elem.childNodes.forEach((el) => { el.classList.add(`${styles.disabledText}`); })\n                                                            elem.childNodes[1].childNodes[0].disabled = true;\n                                                        })\n                                                        break;\n                                                    default:\n                                                        break;\n                                                }\n                                            }\n                                        });\n                                    }\n                                }}\n                            />\n                        )}\n                        label={<>Enable wifi:</>}\n                    />\n                    <div className={styles.textFieldContainer}>\n                        <FormControl className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} shrink={false} required={true} htmlFor=\"wireless-network-name\">Wireless network name:</InputLabel>\n                            <NativeSelect\n                                onChange={handleChangeWirelessName}\n                                value={wirelessName}\n                                defaultValue=\"\"\n                                inputProps={{\n                                    id: 'wireless-network-name',\n                                    required: \"{true}\"\n                                }}\n                                className={styles.textField}\n                            >\n                                <option value=\"\">Please select</option>\n                                <option value=\"Var1\">Var1</option>\n                                <option value=\"Var2\">Var2</option>\n                                <option value=\"Var3\">Var3</option>\n                            </NativeSelect>\n                            <IconButton\n                            >\n                                <RefreshRoundedIcon style={{\n                                    padding: \"10px\",\n                                    marginTop: \"5px\",\n                                    color: \"grey\",\n                                    border: \"1px solid black\",\n                                    borderRadius: \"50%\",\n                                }} />\n                            </IconButton>\n\n\n                        </FormControl>\n                    </div>\n\n                    <FormControlLabel\n                        control={(\n                            <Checkbox\n                                checked={checkboxName}\n                                style={{\n                                    color: \"#137cbd\",\n                                }}\n                                value={checkboxName}\n                                onChange={handleChangeCheckboxName}\n                                inputProps={{ 'aria-label': 'CheckboxWirelesSecurity' }}\n                                onClick={(e) => {\n                                    if (!e.target.checked) {\n                                        securityRef.current.childNodes.forEach((elem) => {\n                                            elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                                            elem.childNodes[1].childNodes[0].disabled = true; elem.childNodes[1].childNodes[0].value = '';\n                                        });\n                                    } else {\n                                        securityRef.current.childNodes.forEach((elem) => {\n                                            elem.childNodes.forEach((elem) => { elem.classList.remove(`${styles.disabledText}`); });\n                                            elem.childNodes[1].childNodes[0].disabled = false;\n                                        });\n                                    }\n                                }}\n                            />\n                        )}\n                        label={<>Enable wireless security:</>}\n                    />\n                    <div ref={securityRef} className={styles.textFieldContainer}>\n                        <div className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} required shrink={false} htmlFor=\"my-input-1\">Security key:</InputLabel>\n                            <Input className={styles.textField} required id=\"my-input-1\" />\n\n                        </div>\n                    </div>\n                    <RadioGroup value={RadiotestName} defaultValue=\"Obtain an IP address automatically (DHCP/BootP)\" aria-label=\"IP\" name=\"customized-radios\">\n                        <FormControlLabel\n                            value=\"Obtain an IP address automatically (DHCP/BootP)\"\n                            control={(\n                                <MyRadioButton\n                                    checked={!RadiotestName}\n                                    onClick={() => {\n                                        settestName(false);\n                                        thirdRef.current.childNodes.forEach((elem) => {\n                                            elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                                            elem.childNodes[1].childNodes[0].disabled = true; elem.childNodes[1].childNodes[0].value = '';\n                                        });\n                                    }}\n                                />\n                            )}\n                            label=\"Obtain an IP address automatically (DHCP/BootP)\"\n                        />\n                        <FormControlLabel\n                            value=\"Use the following IP address\"\n                            control={(\n                                <MyRadioButton\n                                    checked={RadiotestName}\n                                    onClick={() => {\n                                        settestName(true);\n                                        thirdRef.current.childNodes.forEach((elem) => {\n                                            elem.childNodes.forEach((elem) => { elem.classList.remove(`${styles.disabledText}`); });\n                                            elem.childNodes[1].childNodes[0].disabled = false;\n                                        });\n                                    }}\n                                />\n                            )}\n                            label=\"Use the following IP address\"\n                        />\n                    </RadioGroup>\n                    <div ref={thirdRef} className={styles.textFieldContainer}>\n                        <div className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} required shrink={false} htmlFor=\"my-input-1\">IP address:</InputLabel>\n                            <Input className={styles.textField} required id=\"my-input-1\" />\n\n                        </div>\n                        <div className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} required shrink={false} htmlFor=\"my-input-2\">Subnet Mask: </InputLabel>\n                            <Input className={styles.textField} required id=\"my-input-2\" />\n\n                        </div>\n                        <div className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} shrink={false} htmlFor=\"my-input-3\">Default Gateway:</InputLabel>\n                            <Input className={styles.textField} id=\"my-input-3\" />\n\n                        </div>\n                    </div>\n\n                    <RadioGroup value={Radio2testName} defaultValue=\"Obtain DNS server address automatically\" aria-label=\"DNS\" name=\"customized-radios\">\n                        <FormControlLabel\n                            value=\"Obtain DNS server address automatically\"\n                            control={(\n                                <MyRadioButton\n                                    checked={!Radio2testName}\n                                    onClick={() => {\n                                        set2testName(false);\n                                        fourthRef.current.childNodes.forEach((elem) => {\n                                            elem.childNodes.forEach((elem) => { elem.classList.add(`${styles.disabledText}`); });\n                                            elem.childNodes[1].childNodes[0].disabled = true; elem.childNodes[1].childNodes[0].value = '';\n                                        });\n                                    }}\n                                />\n                            )}\n                            label=\"Obtain DNS server address automatically\"\n                        />\n                        <FormControlLabel\n                            value=\"Use the following DS server address\"\n                            control={(\n                                <MyRadioButton\n                                    checked={Radio2testName}\n                                    onClick={() => {\n                                        set2testName(true);\n                                        fourthRef.current.childNodes.forEach((elem) => {\n                                            elem.childNodes.forEach((elem) => { elem.classList.remove(`${styles.disabledText}`); });\n                                            elem.childNodes[1].childNodes[0].disabled = false;\n                                        });\n                                    }}\n                                />\n                            )}\n                            label=\"Use the following DS server address\"\n                        />\n                    </RadioGroup>\n                    <div ref={fourthRef} className={styles.textFieldContainer}>\n                        <div className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} required shrink={false} htmlFor=\"my-input-4\">Preferred DNS server:</InputLabel>\n                            <Input className={styles.textField} required id=\"my-input-4\" />\n\n                        </div>\n                        <div className={styles.MuiInputLabel}>\n                            <InputLabel classes={classesLabel} shrink={false} htmlFor=\"my-input-5\">Alternative DNS server:</InputLabel>\n                            <Input className={styles.textField} id=\"my-input-5\" />\n\n                        </div>\n                    </div>\n\n                </div>\n\n            </form>\n            <div className={styles.buttonContainer}>\n                <Button className={styles.saveButton} type=\"submit\" form=\"my-form-id\">Save</Button>\n                <Button className={styles.saveButton} >Cancel</Button>\n            </div>\n        </div>\n    );\n}\n","import './App.css';\nimport { Ethernet } from './components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Ethernet />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}